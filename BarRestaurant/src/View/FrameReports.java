package View;

import Controller.ReportsController;
import Model.Order;
import Model.Report;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;




public class FrameReports extends javax.swing.JFrame {

    
    ArrayList<Report> storage = new ArrayList<Report>();
    String name_pattern = "^[A-Za-z ]{3,50}+$";
    String num_pattern = "[1-9, /.]+";

    
    public FrameReports() throws ClassNotFoundException {
        initComponents();
        fillOrders();
        this.setSize(600,596);
        this.setLocationRelativeTo(null);
        this.setTitle("Histórico");
    }
    
    
    public boolean verifyText(){
        if(txtOrder.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Digite o número de um pedido para visualização.", 
                    "Visualização indisponível!", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        else if(!(txtOrder.getText()).matches(num_pattern)){
        JOptionPane.showMessageDialog(null, "Caracteres invalidos, digite novamente", 
                    "Visualização indisponível!", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrders = new javax.swing.JTable();
        txtOrder = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOrderItems = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tableOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nº Pedido", "Nº Mesa", "Total (R$)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrders);

        txtOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderActionPerformed(evt);
            }
        });

        jButton4.setText("Ver itens do pedido");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        tableOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Qtde", "Descrição", "Unitário (R$)", "Total (R$)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableOrderItems.getTableHeader().setReorderingAllowed(false);
        tableOrderItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableOrderItems);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4)
                            .addContainerGap(416, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2))
                            .addContainerGap()))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(40, 40, 40)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrdersMouseClicked

        int column = 0;
        int row = tableOrders.getSelectedRow();
        String value = tableOrders.getModel().getValueAt(row, column).toString();
        txtOrder.setText(value);
    }//GEN-LAST:event_tableOrdersMouseClicked

    private void txtOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        cleanTableOrderItems();
        fillOrderItems();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tableOrderItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderItemsMouseClicked

    }//GEN-LAST:event_tableOrderItemsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrameReports().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrameReports.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableOrderItems;
    private javax.swing.JTable tableOrders;
    private javax.swing.JTextField txtOrder;
    // End of variables declaration//GEN-END:variables

    public void setTextOrder(String string) {
        txtOrder.setText(string);
    }

    public String getTextOrder() {
        return txtOrder.getText();
    }
    
    public void cleanTableOrderItems(){
        for(int i=0; i<tableOrderItems.getRowCount();i++)
            for(int j=0; j<tableOrderItems.getColumnCount();j++)
                tableOrderItems.setValueAt(null, i, j);

    }
    
    public void cleanTableOrders(){
        for(int i=0; i<tableOrders.getRowCount();i++)
            for(int j=0; j<tableOrders.getColumnCount();j++)
                tableOrders.setValueAt(null, i, j);
    }
    
    
    private void fillOrders(){
         ReportsController controller = new ReportsController(this);
         List<Order> orders;
        orders = controller.getAllOrders();
                 
         int table_id = 0, order_id, product_id, product_quantity, 
             reference_orderID, i, row, col; 
         i = row = col = 0;
         double order_total = 0, product_price;
         boolean isFinished = true;
         
        while(i<orders.size()){
            reference_orderID = orders.get(i).getOrderId();
            for(;orders.get(i).getOrderId() == reference_orderID; i++){
                order_id = orders.get(i).getOrderId();
                table_id = orders.get(i).getTableId();
                product_id = orders.get(i).getItemId();
                product_quantity = orders.get(i).getProductQuantity();
                product_price = controller.getProductPrice(product_id);
                isFinished = orders.get(i).orderIsFinished();
                order_total += product_quantity * product_price; 

               }            
                // Table fill only if order is finished
                if(isFinished){
                    tableOrders.setValueAt(reference_orderID, row, col);
                    tableOrders.setValueAt(table_id, row, col);
                    tableOrders.setValueAt(order_total, row, col);
                }
                
            }     
    }
    
    private void fillOrderItems(){
        ReportsController controller = new ReportsController(this);
        List<Order> orders;
        int productQuantity;
        double productPrice, productTotal;
        String productName;
        orders = controller.getOrderItems(Integer.parseInt(txtOrder.getText()));
        
        for(int i =0 ; i<orders.size();i++){
            
            productQuantity = orders.get(i).getProductQuantity();
            productName = controller.getProduct(orders.get(i).getItemId()).getName();
            productPrice = controller.getProduct(orders.get(i).getItemId()).getPrice();
            productTotal = productPrice*productQuantity;
          
            tableOrderItems.setValueAt(productQuantity, i, 0);
            tableOrderItems.setValueAt(productName, i, 1);
            tableOrderItems.setValueAt(productPrice, i, 2);
            tableOrderItems.setValueAt(productTotal, i, 3);
            
        }
    }
}
